{"version":3,"sources":["constants/datasetInfo.js","components/Card/index.js","components/Homepage/index.js","components/NavBar/index.js","components/App/index.js","serviceWorker.js","theme.js","index.js"],"names":["Dataset","url","title","description","this","datasetsArray","Card","props","dataset","classes","className","card","CardHeader","Typography","variant","color","CardContent","CardActions","Link","underline","href","Button","Component","withStyles","theme","whiteSpace","backgroundColor","palette","secondary","light","Homepage","Container","maxWidth","Grid","container","spacing","map","d","key","item","xs","NavBar","state","AppBar","position","Toolbar","App","Boolean","window","location","hostname","match","createMuiTheme","primary","main","error","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAAMA,EACJ,WAAYC,EAAKC,EAAOC,GAAc,oBACpCC,KAAKH,IAAMA,EACXG,KAAKF,MAAQA,EACbE,KAAKD,YAAcA,GAIVE,EAAgB,CAC3B,IAAIL,EACF,+BACA,4BACA,+PAEF,IAAIA,EACF,2BACA,mBACA,mCAEF,IAAIA,EACF,0DACA,kBACA,+O,gECDEM,E,iLACM,IAAD,EAC6BF,KAAKG,MAAMC,QAAvCP,EADD,EACCA,IAAKC,EADN,EACMA,MAAOC,EADb,EACaA,YAEZM,EAAYL,KAAKG,MAAjBE,QAER,OACE,kBAAC,IAAD,CAASC,UAAWD,EAAQE,MAC1B,kBAACC,EAAA,EAAD,CACEV,MACE,kBAACW,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAC5Bb,KAIP,kBAACc,EAAA,EAAD,KACE,kBAACH,EAAA,EAAD,CACEC,QAAQ,QACRC,MAAM,cACNL,UAAWD,EAAQN,aAElBA,IAGL,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,OAAOC,KAAMnB,GAC3B,kBAACoB,EAAA,EAAD,CAAQP,QAAQ,YAAYC,MAAM,WAAlC,oB,GA1BOO,aAoCJC,eA7CA,SAAAC,GAAK,MAAK,CACvBrB,YAAa,CACXsB,WAAY,YAEdd,KAAM,CACJe,gBAAiBF,EAAMG,QAAQC,UAAUC,UAwC9BN,CAAmBjB,GCnCnBwB,E,iLAdX,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtB9B,EAAc+B,KAAI,SAAAC,GAAC,OAClB,kBAACJ,EAAA,EAAD,CAAMK,IAAKD,EAAEpC,IAAKsC,MAAI,EAACC,GAAI,IACzB,kBAAC,EAAD,CAAMhC,QAAS6B,c,GAPNf,a,gBCURmB,E,2MAZbC,MAAQ,G,wEAEN,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAChC,EAAA,EAAD,CAAYC,QAAQ,MAApB,qC,GANWQ,aCYNwB,E,iLATX,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUxB,aCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCES3B,EAjBD4B,YAAe,CAC3BzB,QAAS,CACP0B,QAAS,CACPC,KAAM,WAER1B,UAAW,CACT0B,KAAM,WAERC,MAAO,CACLD,KAAM,WAERE,WAAY,CACVC,QAAS,WCNfC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAepC,MAAOA,GACpB,kBAACqC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2139bcdc.chunk.js","sourcesContent":["class Dataset {\n  constructor(url, title, description) {\n    this.url = url;\n    this.title = title;\n    this.description = description;\n  }\n}\n\nexport const datasetsArray = [\n  new Dataset(\n    \"http://www.topology-zoo.org/\",\n    \"The Internet Topology Zoo\",\n    \"This dataset does not include information about delays but only the geographic locations of the nodes. You can use these locations to compute a lower bound (propagation delay) of the latency.\\nNote that nodes could also be just ISP points of presence.\"\n  ),\n  new Dataset(\n    \"https://www.isolario.it/\",\n    \"Isolario Project\",\n    \"This project could be on break.\"\n  ),\n  new Dataset(\n    \"https://github.com/leomaurodesenv/game-datasets#dataset\",\n    \"Gaming Datasets\",\n    \"Delay is a key measure in the evaluation of the user experience in online gaming applications, thus you can find these datasets useful.\\nUsually, they specify the round-trip delay as lag.\\nThese datasets usually refer to small groups.\"\n  )\n];\n","import React, { Component } from \"react\";\nimport {\n  Card as MUICard,\n  CardHeader,\n  Typography,\n  CardContent,\n  CardActions,\n  Button,\n  Link\n} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = theme => ({\n  description: {\n    whiteSpace: \"pre-wrap\"\n  },\n  card: {\n    backgroundColor: theme.palette.secondary.light\n  }\n});\n\nclass Card extends Component {\n  render() {\n    const { url, title, description } = this.props.dataset;\n\n    const { classes } = this.props;\n\n    return (\n      <MUICard className={classes.card}>\n        <CardHeader\n          title={\n            <Typography variant=\"h4\" color=\"primary\">\n              {title}\n            </Typography>\n          }\n        ></CardHeader>\n        <CardContent>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n            className={classes.description}\n          >\n            {description}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Link underline=\"none\" href={url}>\n            <Button variant=\"contained\" color=\"primary\">\n              GO THERE!\n            </Button>\n          </Link>\n        </CardActions>\n      </MUICard>\n    );\n  }\n}\n\nexport default withStyles(styles)(Card);\n","import React, { Component } from \"react\";\nimport { Container, Grid } from \"@material-ui/core\";\n\nimport { datasetsArray } from \"../../constants/datasetInfo\";\nimport Card from \"../Card\";\n\nclass Homepage extends Component {\n  render() {\n    return (\n      <Container maxWidth=\"sm\">\n        <Grid container spacing={4}>\n          {datasetsArray.map(d => (\n            <Grid key={d.url} item xs={12}>\n              <Card dataset={d} />\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default Homepage;\n","import React, { Component } from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nclass NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\">Network Datasets Collection</Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Homepage from \"../Homepage\";\nimport NavBar from \"../NavBar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <NavBar />\n        <Homepage />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#003da5\"\n    },\n    secondary: {\n      main: \"#5bc2e7\"\n    },\n    error: {\n      main: \"#ed8b00\"\n    },\n    background: {\n      default: \"#fff\"\n    }\n  }\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport theme from \"./theme.js\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}